DROP TABLE authorities;
DROP TABLE GRADE;
DROP TABLE MEMBERDATEMANAGEMENT;
drop table TODOLIST;
drop table WITHDRAWIDLIST;
drop table persistent_logins;
drop table TABOOWORD;
DROP TABLE MEMBER;
drop table FAQ;
drop table QNA;
drop trigger tri_member;
drop trigger TRI_MEMBER_DATE;
drop trigger TRI_MEMBER_SECURITY;
drop sequence MEMBER_SEQ;
drop sequence TABOO_SEQ;
drop sequence TODOLIST_SEQ;
drop sequence QNA_SEQ;
drop sequence FAQ_SEQ;

CREATE TABLE MEMBER(
IDNUMBER NUMBER UNIQUE ,
EMAIL VARCHAR2(120) PRIMARY KEY, 
PWD NVARCHAR2(200) NOT NULL ,
NICKNAME NVARCHAR2(60) UNIQUE, 
NAME NVARCHAR2(40) NOT NULL,
BIRTH DATE ,
PHONENUMBER VARCHAR2(40) ,
GENDER NVARCHAR2(10) , 
ENABLED NUMBER ,  
CAUTIONCOUNT NUMBER ,
CHECKSNSID NUMBER DEFAULT 0,
CHECK (GENDER IN(  'male' , 'female' )) ,
CHECK (CHECKSNSID IN(  '0' , '1' )) 
);


CREATE TABLE GRADE (
    EMAIL VARCHAR2(120)  PRIMARY KEY ,
    GRADE  NVARCHAR2(40) DEFAULT 'BASIC',
    CHECK (GRADE IN ('ADMIN' , 'BASIC' , 'SILVER' , 'GOLD' , 'VIP' )),
    FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE authorities(
    EMAIL VARCHAR2(120) ,
    IDNUMBER NUMBER,
    authority VARCHAR2(100) DEFAULT 'ROLE_USER',
    FOREIGN KEY( EMAIL) REFERENCES MEMBER( EMAIL) ON DELETE CASCADE
);

CREATE TABLE persistent_logins (
	username VARCHAR(64) NOT NULL,
	series VARCHAR(64) PRIMARY KEY,
	token VARCHAR(64) NOT NULL,
	last_used TIMESTAMP NOT NULL
);

CREATE TABLE TABOOWORD(
     TABOOWORDNUMBER NUMBER PRIMARY KEY ,
     TABOOWORDCHECK VARCHAR2(50) UNIQUE
);
 create index TABOOWORD_IDX1 on TABOOWORD(TABOOWORDCHECK) indextype is ctxsys.context;


CREATE TABLE MEMBERDATEMANAGEMENT (
     email VARCHAR2(120)  PRIMARY KEY,
     RegistrationDate date default sysdate,
     LastDate date default sysdate,
     WITHDRAWID NUMBER DEFAULT 0,
     CHECK (WITHDRAWID IN(  '0' , '1' )), 
     FOREIGN KEY(EMAIL) REFERENCES MEMBER(EMAIL) ON DELETE CASCADE
);

CREATE TABLE WITHDRAWIDLIST (
    EMAIL VARCHAR2(120)  PRIMARY KEY,
    REQUESTDATE DATE,
    DATECOUNT NUMBER(2)
);

CREATE TABLE TODOLIST (
     todolistNum number primary key,
     email VARCHAR2(120),
     startdate VARCHAR2(50),
     enddate VARCHAR2(50),
     content VARCHAR2(600),
     publiccheck VARCHAR2(26)
     CHECK (publiccheck IN('privateChecking' , 'publicChecking') )     
);



CREATE TRIGGER TRI_MEMBER_DATE
       AFTER INSERT
       ON MEMBER
       FOR EACH ROW
BEGIN
      INSERT INTO MEMBERDATEMANAGEMENT
      VALUES( :NEW.EMAIL , SYSDATE , SYSDATE, default);
END;
/


CREATE TRIGGER TRI_MEMBER
       AFTER INSERT
       ON MEMBER
       FOR EACH ROW
BEGIN
      INSERT INTO GRADE 
      VALUES( :NEW.EMAIL , DEFAULT);
END;
/

CREATE TRIGGER TRI_MEMBER_SECURITY
       AFTER INSERT
       ON MEMBER
       FOR EACH ROW
BEGIN
      INSERT INTO authorities
      VALUES( :NEW.EMAIL , :NEW.IDNUMBER , DEFAULT);
END;
/

CREATE SEQUENCE MEMBER_SEQ START WITH 1;
CREATE SEQUENCE TABOO_SEQ START WITH 1;
CREATE SEQUENCE TODOLIST_SEQ START WITH 1;

insert Into tabooword values (TABOO_SEQ.nextval , '시발');
update authorities set  authority = 'ROLE_SUPERADMIN' WHERE email = 'qaz774422@naver.com';
commit;


CREATE TABLE FAQ (
   WRITER VARCHAR2(15),
   SUBJECT   VARCHAR2(100),
   CONTENT   VARCHAR2(4000),
   RDATE   DATE,
   HITS   NUMBER,
   TEMP2   NUMBER,
   TEMP3   NUMBER,
   SEQ   NUMBER
);

CREATE TABLE QNA (
   SEQ   NUMBER,
   WRITER   VARCHAR2(500),
   EMAIL   VARCHAR2(500),
   SUBJECT   VARCHAR2(100),
   CONTENT   VARCHAR2(4000),
   RDATE   DATE,
   ORIGINNO   NUMBER,
   GROUPORD   NUMBER,
   HITS   NUMBER,
   WRITEREMAIL   VARCHAR2(500)
);

CREATE SEQUENCE QNA_SEQ START WITH 1;
CREATE SEQUENCE FAQ_SEQ START WITH 1;
//////////////////////////////////////////////////////////////////////////////
(select  m.IDNUMBER , m.EMAIL , m.NICKNAME , m.PHONENUMBER , m.GENDER , m.CHECKSNSID , m.ENABLED ,  a.AUTHORITY from AUTHORITIES a , MEMBER m where a.email = m.email)
select e.IDNUMBER , e.EMAIL , e.NICKNAME , e.PHONENUMBER , e.GENDER , e.CHECKSNSID , b.ROLE , e.ENABLED , b.REGISTRATIONDATE , b.LASTDATE , e.AUTHORITY    from (select  m.IDNUMBER , m.EMAIL , m.NICKNAME , m.PHONENUMBER , m.GENDER , m.CHECKSNSID , m.ENABLED ,  a.AUTHORITY from AUTHORITIES a , MEMBER m where a.email = m.email) e , (select r.email , r.ROLE , d.REGISTRATIONDATE , d.LASTDATE from ROLE r , MEMBERDATEMANAGEMENT d where r.email = d.email) b 
where e.email = b.email;
select m.IDNUMBER , m.EMAIL , m.NICKNAME , m.PHONENUMBER , m.GENDER , m.CHECKSNSID , r.ROLE , m.ENABLED , d.REGISTRATIONDATE , d.LASTDATE , a.AUTHORITY FROM MEMBER m , ROLE r , MEMBERDATEMANAGEMENT d , AUTHORITIES a

select e.IDNUMBER , e.EMAIL , e.NAME , e.NICKNAME , e.PHONENUMBER , e.GENDER , e.CHECKSNSID , b.GRADE , e.ENABLED , b.REGISTRATIONDATE , b.LASTDATE , e.AUTHORITY    from (select  m.IDNUMBER , m.EMAIL , m.NAME , m.NICKNAME , m.PHONENUMBER , m.GENDER , m.CHECKSNSID , m.ENABLED ,  a.AUTHORITY from AUTHORITIES a , MEMBER m where a.email = m.email) e , (select r.email , r.GRADE , d.REGISTRATIONDATE , d.LASTDATE from GRADE  r , MEMBERDATEMANAGEMENT d where r.email = d.email) b where e.email = b.email;